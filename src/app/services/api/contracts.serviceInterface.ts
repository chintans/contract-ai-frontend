/**
 * API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ContractControllerHybridIngestRequest } from '../model/models';
import { UpdateRiskFlagDto } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ContractsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Analyze a contract using AI
     * 
     * @param id The ID of the contract to analyze
     */
    contractControllerAnalyzeContract(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Ask a question about the contract
     * 
     * @param id The ID of the contract to ask question for
     */
    contractControllerAskQuestion(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Upload a contract file
     * 
     * @param file 
     * @param contractType 
     */
    contractControllerCreate(file?: Blob, contractType?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Export contract analysis
     * 
     * @param id The ID of the contract to export
     */
    contractControllerExportAnalysis(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get all contracts
     * 
     */
    contractControllerFindAll(extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get a contract by id
     * 
     * @param id The ID of the contract to get
     */
    contractControllerFindOne(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get full contract analysis
     * 
     * @param id The ID of the contract to get analysis for
     */
    contractControllerGetAnalysis(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get chat history
     * 
     * @param id The ID of the contract to get chat history for
     */
    contractControllerGetChat(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get contract Q&amp;A
     * 
     * @param id The ID of the contract to get Q&amp;A for
     */
    contractControllerGetContractQnA(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get contract reviews
     * 
     * @param id The ID of the contract to get reviews for
     */
    contractControllerGetContractReviews(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get contract risks
     * 
     * @param id The ID of the contract to get risks for
     */
    contractControllerGetContractRisks(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get contract summaries
     * 
     * @param id The ID of the contract to get summary for
     */
    contractControllerGetContractSummary(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Ingest a contract into the hybrid search index
     * 
     * @param id The ID of the contract to ingest
     * @param contractControllerHybridIngestRequest 
     */
    contractControllerHybridIngest(id: string, contractControllerHybridIngestRequest: ContractControllerHybridIngestRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Hybrid semantic &amp; vector search for contract clauses
     * 
     * @param id The ID of the contract to search
     * @param q The search query to find relevant clauses
     */
    contractControllerHybridSearch(id: string, q: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete a contract
     * 
     * @param id The ID of the contract to delete
     */
    contractControllerRemove(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Submit a chat question
     * 
     * @param id The ID of the contract to submit chat for
     */
    contractControllerSubmitChat(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update a contract
     * 
     * @param id The ID of the contract to update
     * @param body 
     */
    contractControllerUpdate(id: string, body: object, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Update risk flag status
     * 
     * @param id The ID of the contract to update risk flag for
     * @param riskId The ID of the risk flag to update
     * @param updateRiskFlagDto 
     */
    contractControllerUpdateRiskFlag(id: string, riskId: string, updateRiskFlagDto: UpdateRiskFlagDto, extraHttpRequestParams?: any): Observable<{}>;

}
